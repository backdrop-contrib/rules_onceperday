<?php

/**
 * Implements hook_permission().
 */
function rules_onceperday_permission() {
  return array(
    'administer rules_onceperday' => array(
      'title' => t('Administer Once per Day settings')));
}


/**
 * Implements hook_config_info().
 */
function rules_onceperday_config_info() {
  $prefixes['rules_onceperday.settings'] = array(
    'label' => t('Settings'),
    'group' => t('Rules Once per Day'),
  );
  return $prefixes;
}


/**
 * Implements hook_cron().
 */
function rules_onceperday_cron() {
  // Once per day event.
  $last_timestamp = config_get('rules_onceperday.settings', 'last');
  $last_date = date('Y-m-d', $last_timestamp);
  $this_date = date('Y-m-d');
  $this_hour = date('H');
  $after_hour = ($this_hour >= config_get('rules_onceperday.settings', 'hour'));
  $new_day = ($this_date != $last_date);
  if ($after_hour and $new_day) {
    rules_invoke_event('once_per_day');
    config_set('rules_onceperday.settings', 'last', time());
  }
}

/**
 * Implements hook_menu().
 */
function rules_onceperday_menu() {
  $items = array();
  $items['admin/config/workflow/rules/rules_onceperday'] = array(
    'title' => 'Once per Day',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rules_onceperday_admin_form'),
    'access arguments' => array('administer rules_onceperday'));
  return $items;
}

/**
 * Administration settings form.
 */
function rules_onceperday_admin_form($form, &$form_state) {
  $form = array();
  $form['help'] = array(
    '#prefix' => '<p>',
    '#markup' => t('The Once per Day module causes a Rules event to be triggered once, and only once, each day. It also provides a Rules condition to require a day of the week, for once per week actions.'),
    '#suffix' => '</p>');

  $last_triggered = config_get('rules_onceperday.settings', 'last');
  if ($last_triggered) {
    $last_triggered = format_date($last_triggered, 'long');
  }
  else {
    $last_triggered = 'Not yet triggered';
  }
  $form['last'] = array(
    '#title' => t('Last triggered'),
    '#type' => 'item',
    '#markup' => $last_triggered);
  if (config_get('rules_onceperday.settings', 'last') != NULL) {
    $form['reset'] = array(
      '#value' => t('Reset last-triggered date'),
      '#type' => 'submit',
      '#submit' => array(
        'rules_onceperday_reset'));
  }
  $form['hour'] = array(
    '#title' => t('Hour in which to trigger Rules event.'),
    '#description' => t('The rules event will be triggered the first time cron runs in, or after, this hour (24 hour clock).'),
    '#type' => 'select',
    '#options' => range(0, 23),
    '#default_value' => config_get('rules_onceperday.settings', 'hour'));

  $form['#config'] = 'rules_onceperday.settings';
  return system_settings_form($form);
}

/**
 * Reset function called from administration settings form.
 */
function rules_onceperday_reset() {
  variable_del('rules_onceperday_last');
}
